// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/registry.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Package mocks base method.
func (m *MockRegistry) Package(ctx context.Context, url string) (*Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", ctx, url)
	ret0, _ := ret[0].(*Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Package indicates an expected call of Package.
func (mr *MockRegistryMockRecorder) Package(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*MockRegistry)(nil).Package), ctx, url)
}

// Packages mocks base method.
func (m *MockRegistry) Packages(ctx context.Context) ([]*Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packages", ctx)
	ret0, _ := ret[0].([]*Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Packages indicates an expected call of Packages.
func (mr *MockRegistryMockRecorder) Packages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packages", reflect.TypeOf((*MockRegistry)(nil).Packages), ctx)
}

// RegisterPackage mocks base method.
func (m *MockRegistry) RegisterPackage(ctx context.Context, url, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPackage", ctx, url, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPackage indicates an expected call of RegisterPackage.
func (mr *MockRegistryMockRecorder) RegisterPackage(ctx, url, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPackage", reflect.TypeOf((*MockRegistry)(nil).RegisterPackage), ctx, url, version)
}

// Sync mocks base method.
func (m *MockRegistry) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockRegistryMockRecorder) Sync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockRegistry)(nil).Sync), ctx)
}
